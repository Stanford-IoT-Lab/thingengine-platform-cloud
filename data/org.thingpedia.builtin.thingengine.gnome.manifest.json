{
    "thingpedia_name": "Almond 4 GNOME",
    "thingpedia_description": "Your Almond, on your Free Desktop OS",
    "repository": "https://github.com/stanford-oval/thingengine-core",
    "module_type": "org.thingpedia.builtin",
    "params": {},
    "category": "physical",
    "subcategory": "service",
    "types": [],
    "child_types": [],
    "auth": {
        "type": "builtin"
    },
    "queries": {
        "get_screenshot": {
            "args": [
                {
                    "name": "picture_url",
                    "type": "Entity(tt:picture)",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "get a screenshot from your PC",
            "confirmation": "a screenshot of your PC",
            "confirmation_remote": "a screenshot of $__person's PC",
            "canonical": "screenshot on laptop",
            "formatted": [
                {
                    "type": "picture",
                    "url": "${picture_url}"
                }
            ],
            "poll_interval": -1,
            "is_list": false
        }
    },
    "actions": {
        "open_app": {
            "args": [
                {
                    "name": "app_id",
                    "type": "Entity(org.freedesktop:app_id)",
                    "question": "What app do you want to open?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "url",
                    "type": "Entity(tt:url)",
                    "question": "What file do you want to open?",
                    "is_input": true,
                    "required": false
                }
            ],
            "doc": "open the given app (optionally with a file)",
            "confirmation": "open $app_id",
            "confirmation_remote": "open $app_id in $__person's PC",
            "canonical": "open app on laptop",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        },
        "lock": {
            "args": [],
            "doc": "lock your PC",
            "confirmation": "lock your PC",
            "confirmation_remote": "lock $__person's PC",
            "canonical": "lock on laptop",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        },
        "set_power": {
            "args": [
                {
                    "name": "power",
                    "type": "Enum(on,off)",
                    "question": "Do you want to turn it on or off?",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "switch on/off",
            "confirmation": "turn $power your PC",
            "confirmation_remote": "turn $power $__person's PC",
            "canonical": "set power on laptop",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        },
        "create_file": {
            "args": [
                {
                    "name": "file_name",
                    "type": "Entity(tt:path_name)",
                    "question": "What should be the name of the file?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "contents",
                    "type": "String",
                    "question": "What do you want to write in the file?",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "create a new file in your laptop",
            "confirmation": "create a new file in your laptop named $file_name containing $contents",
            "confirmation_remote": "create a new file in $__person's laptop named $file_name containing $contents",
            "canonical": "create file on laptop",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        },
        "delete_file": {
            "args": [
                {
                    "name": "file_name",
                    "type": "Entity(tt:path_name)",
                    "question": "What file do you want to delete?",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "delete a file from your laptop",
            "confirmation": "delete the file $file_name from your laptop",
            "confirmation_remote": "delete the file $file_name from $__person's laptop",
            "canonical": "delete file on laptop",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        },
        "set_background": {
            "args": [
                {
                    "name": "picture_url",
                    "type": "Entity(tt:picture)",
                    "question": "What picture do you want to use as the background?",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "changes the laptop wallpaper",
            "confirmation": "set your laptop's background to $picture_url",
            "confirmation_remote": "set $__person's laptop's background to $picture_url",
            "canonical": "set background on laptop",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        }
    },
    "examples": [
        {
            "utterance": "open $p_app_id",
            "program": "let action x := \\(p_app_id :Entity(org.freedesktop:app_id)) -> @org.thingpedia.builtin.thingengine.gnome.open_app(app_id=p_app_id);"
        },
        {
            "utterance": "open $p_app_id on my laptop",
            "program": "let action x := \\(p_app_id :Entity(org.freedesktop:app_id)) -> @org.thingpedia.builtin.thingengine.gnome.open_app(app_id=p_app_id);"
        },
        {
            "utterance": "open $p_app_id on my pc",
            "program": "let action x := \\(p_app_id :Entity(org.freedesktop:app_id)) -> @org.thingpedia.builtin.thingengine.gnome.open_app(app_id=p_app_id);"
        },
        {
            "utterance": "start $p_app_id",
            "program": "let action x := \\(p_app_id :Entity(org.freedesktop:app_id)) -> @org.thingpedia.builtin.thingengine.gnome.open_app(app_id=p_app_id);"
        },
        {
            "utterance": "open $p_url with $p_app_id",
            "program": "let action x := \\(p_url :Entity(tt:url), p_app_id :Entity(org.freedesktop:app_id)) -> @org.thingpedia.builtin.thingengine.gnome.open_app(app_id=p_app_id, url=p_url);"
        },
        {
            "utterance": "open $p_url with $p_app_id on my laptop",
            "program": "let action x := \\(p_url :Entity(tt:url), p_app_id :Entity(org.freedesktop:app_id)) -> @org.thingpedia.builtin.thingengine.gnome.open_app(app_id=p_app_id, url=p_url);"
        },
        {
            "utterance": "use $p_app_id to open $p_url",
            "program": "let action x := \\(p_url :Entity(tt:url), p_app_id :Entity(org.freedesktop:app_id)) -> @org.thingpedia.builtin.thingengine.gnome.open_app(app_id=p_app_id, url=p_url);"
        },
        {
            "utterance": "lock my pc",
            "program": "let action x := @org.thingpedia.builtin.thingengine.gnome.lock();"
        },
        {
            "utterance": "lock my laptop",
            "program": "let action x := @org.thingpedia.builtin.thingengine.gnome.lock();"
        },
        {
            "utterance": "activate the lock screen on my laptop",
            "program": "let action x := @org.thingpedia.builtin.thingengine.gnome.lock();"
        },
        {
            "utterance": "turn $p_power my pc",
            "program": "let action x := \\(p_power :Enum(on,off)) -> @org.thingpedia.builtin.thingengine.gnome.set_power(power=p_power);"
        },
        {
            "utterance": "turn $p_power my laptop",
            "program": "let action x := \\(p_power :Enum(on,off)) -> @org.thingpedia.builtin.thingengine.gnome.set_power(power=p_power);"
        },
        {
            "utterance": "create a file named ${p_file_name:const} on my laptop",
            "program": "let action x := \\(p_file_name :Entity(tt:path_name)) -> @org.thingpedia.builtin.thingengine.gnome.create_file(file_name=p_file_name);"
        },
        {
            "utterance": "create a file named ${p_file_name:const} on my laptop containing $p_contents",
            "program": "let action x := \\(p_file_name :Entity(tt:path_name), p_contents :String) -> @org.thingpedia.builtin.thingengine.gnome.create_file(file_name=p_file_name, contents=p_contents);"
        },
        {
            "utterance": "delete ${p_file_name} from my laptop",
            "program": "let action x := \\(p_file_name :Entity(tt:path_name)) -> @org.thingpedia.builtin.thingengine.gnome.delete_file(file_name=p_file_name);"
        },
        {
            "utterance": "delete the file named ${p_file_name:const} from my laptop",
            "program": "let action x := \\(p_file_name :Entity(tt:path_name)) -> @org.thingpedia.builtin.thingengine.gnome.delete_file(file_name=p_file_name);"
        },
        {
            "utterance": "change the background on my laptop",
            "program": "let action x := @org.thingpedia.builtin.thingengine.gnome.set_background();"
        },
        {
            "utterance": "set the background of my laptop to ${p_picture_url}",
            "program": "let action x := \\(p_picture_url :Entity(tt:picture)) -> @org.thingpedia.builtin.thingengine.gnome.set_background(picture_url=p_picture_url);"
        },
        {
            "utterance": "use ${p_picture_url} as the background of my laptop",
            "program": "let action x := \\(p_picture_url :Entity(tt:picture)) -> @org.thingpedia.builtin.thingengine.gnome.set_background(picture_url=p_picture_url);"
        },
        {
            "utterance": "delete a file from my laptop",
            "program": "let action x := @org.thingpedia.builtin.thingengine.gnome.delete_file();"
        },
        {
            "utterance": "a screenshot of my laptop",
            "program": "let table x := @org.thingpedia.builtin.thingengine.gnome.get_screenshot();"
        },
        {
            "utterance": ", take a screenshot of my laptop",
            "program": "let table x := @org.thingpedia.builtin.thingengine.gnome.get_screenshot();"
        },
        {
            "utterance": ", save a screenshot of my laptop",
            "program": "let table x := @org.thingpedia.builtin.thingengine.gnome.get_screenshot();"
        }
    ]
}

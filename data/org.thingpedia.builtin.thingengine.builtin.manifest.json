{
    "thingpedia_name": "Miscellaneous Interfaces",
    "thingpedia_description": "Triggers and actions that are always available and don't belong to any specific device or account. Mostly related to time and randomness, because the universe is chaos and those always there. Also debugging.",
    "repository": "https://github.com/stanford-oval/thingengine-core",
    "module_type": "org.thingpedia.builtin",
    "params": {},
    "category": "data",
    "subcategory": "service",
    "types": [],
    "child_types": [],
    "auth": {
        "type": "builtin"
    },
    "queries": {
        "get_time": {
            "args": [
                {
                    "name": "time",
                    "type": "Date",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "get the current time; this is equivalent to $now() and exists mostly so that Sabrina can codegen it",
            "confirmation": "the current time",
            "confirmation_remote": "",
            "canonical": "get time",
            "formatted": [
                {
                    "type": "text",
                    "text": "Current time is ${time:time}."
                }
            ],
            "poll_interval": -1,
            "is_list": false
        },
        "get_date": {
            "args": [
                {
                    "name": "date",
                    "type": "Date",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "get the current date; this is equivalent to $now() and exists mostly so that Sabrina can codegen it; also equivalent to get_time() but the default formatting is different",
            "confirmation": "today's date",
            "confirmation_remote": "",
            "canonical": "get date",
            "formatted": [
                {
                    "type": "text",
                    "text": "Today is ${date:date}."
                }
            ],
            "poll_interval": -1,
            "is_list": false
        },
        "get_random_between": {
            "args": [
                {
                    "name": "low",
                    "type": "Number",
                    "question": "What should be the lower bound?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "high",
                    "type": "Number",
                    "question": "What should be the upper bound?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "random",
                    "type": "Number",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "get a uniform random integer between `low` and `high`; this is equivalent to $random() and some rounding/mod operation",
            "confirmation": "a random integer between $low and $high",
            "confirmation_remote": "",
            "canonical": "get random integer",
            "formatted": [
                {
                    "type": "text",
                    "text": "${random}"
                }
            ],
            "poll_interval": -1,
            "is_list": false
        },
        "get_commands": {
            "args": [
                {
                    "name": "device",
                    "type": "Entity(tt:device)",
                    "question": "What device do you want help for?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "program",
                    "type": "Entity(tt:program)",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "retrieve the list of supported commands for the given device",
            "confirmation": "the list of commands of $device",
            "confirmation_remote": "",
            "canonical": "list commands",
            "formatted": [
                {
                    "type": "text",
                    "text": "${program}"
                }
            ],
            "poll_interval": -1,
            "is_list": true
        }
    },
    "actions": {
        "debug_log": {
            "args": [
                {
                    "name": "message",
                    "type": "String",
                    "question": "What should I write in the logs?",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "log a message in the developer logs",
            "confirmation": "write $message in the developer logs",
            "confirmation_remote": "write $message in the developer logs on $__person's phone",
            "canonical": "log",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        },
        "configure": {
            "args": [
                {
                    "name": "device",
                    "type": "Entity(tt:device)",
                    "question": "What device do you want to configure?",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "configure a specific device by type",
            "confirmation": "configure a new $device",
            "confirmation_remote": "configure a new $device on $__person's Almond",
            "canonical": "configure",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        },
        "say": {
            "args": [
                {
                    "name": "message",
                    "type": "String",
                    "question": "What do you want me to say?",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "makes Almond say something; this is the codegennable version of @$notify",
            "confirmation": "send me a message $message",
            "confirmation_remote": "send $__person message $message",
            "canonical": "say",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        },
        "discover": {
            "args": [],
            "doc": "start interactive discovery for new devices",
            "confirmation": "search for new devices",
            "confirmation_remote": "search for new devices on $__person's Almond",
            "canonical": "discover",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        },
        "open_url": {
            "args": [
                {
                    "name": "url",
                    "type": "Entity(tt:url)",
                    "question": "What URL do you want to open?",
                    "is_input": true,
                    "required": true
                }
            ],
            "doc": "open a file/link",
            "confirmation": "open $url",
            "confirmation_remote": "open $url in $__person's PC",
            "canonical": "open url on builtin",
            "formatted": [],
            "poll_interval": -1,
            "is_list": false
        }
    },
    "examples": [
        {
            "utterance": "the current time",
            "program": "let table x := @org.thingpedia.builtin.thingengine.builtin.get_time();"
        },
        {
            "utterance": "what time is it",
            "program": "let table x := @org.thingpedia.builtin.thingengine.builtin.get_time();"
        },
        {
            "utterance": "the current date",
            "program": "let table x := @org.thingpedia.builtin.thingengine.builtin.get_date();"
        },
        {
            "utterance": "what day is today",
            "program": "let table x := @org.thingpedia.builtin.thingengine.builtin.get_date();"
        },
        {
            "utterance": "what day is it",
            "program": "let table x := @org.thingpedia.builtin.thingengine.builtin.get_date();"
        },
        {
            "utterance": "a random number",
            "program": "let table x := @org.thingpedia.builtin.thingengine.builtin.get_random_between();"
        },
        {
            "utterance": "a random number between ${p_low:const} and ${p_high:const}",
            "program": "let table x := \\(p_low :Number, p_high :Number) -> @org.thingpedia.builtin.thingengine.builtin.get_random_between(low=p_low, high=p_high);"
        },
        {
            "utterance": "a random integer between ${p_low:const} and ${p_high:const}",
            "program": "let table x := \\(p_low :Number, p_high :Number) -> @org.thingpedia.builtin.thingengine.builtin.get_random_between(low=p_low, high=p_high);"
        },
        {
            "utterance": ", throw a dice between ${p_low:const} and ${p_high:const}",
            "program": "let table x := \\(p_low :Number, p_high :Number) -> @org.thingpedia.builtin.thingengine.builtin.get_random_between(low=p_low, high=p_high);"
        },
        {
            "utterance": "discover new devices",
            "program": "let action x := @org.thingpedia.builtin.thingengine.builtin.discover();"
        },
        {
            "utterance": "search devices nearby",
            "program": "let action x := @org.thingpedia.builtin.thingengine.builtin.discover();"
        },
        {
            "utterance": "configure $p_device",
            "program": "let action x := \\(p_device :Entity(tt:device)) -> @org.thingpedia.builtin.thingengine.builtin.configure(device=p_device);"
        },
        {
            "utterance": "setup $p_device",
            "program": "let action x := \\(p_device :Entity(tt:device)) -> @org.thingpedia.builtin.thingengine.builtin.configure(device=p_device);"
        },
        {
            "utterance": "enable $p_device",
            "program": "let action x := \\(p_device :Entity(tt:device)) -> @org.thingpedia.builtin.thingengine.builtin.configure(device=p_device);"
        },
        {
            "utterance": "install $p_device",
            "program": "let action x := \\(p_device :Entity(tt:device)) -> @org.thingpedia.builtin.thingengine.builtin.configure(device=p_device);"
        },
        {
            "utterance": "send me a message ${p_message:const}",
            "program": "let action x := \\(p_message :String) -> @org.thingpedia.builtin.thingengine.builtin.say(message=p_message);"
        },
        {
            "utterance": "tell me $p_message",
            "program": "let action x := \\(p_message :String) -> @org.thingpedia.builtin.thingengine.builtin.say(message=p_message);"
        },
        {
            "utterance": "say $p_message",
            "program": "let action x := \\(p_message :String) -> @org.thingpedia.builtin.thingengine.builtin.say(message=p_message);"
        },
        {
            "utterance": "a random coin",
            "program": "let table x := @org.thingpedia.builtin.thingengine.builtin.get_random_between(low=0, high=1);"
        },
        {
            "utterance": "today 's date",
            "program": "let table x := @org.thingpedia.builtin.thingengine.builtin.get_date();"
        },
        {
            "utterance": ", generate a random number between ${p_low:const} and ${p_high:const}",
            "program": "let table x := \\(p_low :Number, p_high :Number) -> @org.thingpedia.builtin.thingengine.builtin.get_random_between(low=p_low, high=p_high);"
        },
        {
            "utterance": ", choose a number between ${p_low:const} and ${p_high:const}",
            "program": "let table x := \\(p_low :Number, p_high :Number) -> @org.thingpedia.builtin.thingengine.builtin.get_random_between(low=p_low, high=p_high);"
        },
        {
            "utterance": ", choose a random number",
            "program": "let table x := @org.thingpedia.builtin.thingengine.builtin.get_random_between();"
        },
        {
            "utterance": "the commands in $p_device",
            "program": "let table x := \\(p_device :Entity(tt:device)) -> @org.thingpedia.builtin.thingengine.builtin.get_commands(device=p_device);"
        },
        {
            "utterance": ", help $p_device",
            "program": "let table x := \\(p_device :Entity(tt:device)) -> @org.thingpedia.builtin.thingengine.builtin.get_commands(device=p_device);"
        },
        {
            "utterance": "commands that $p_device supports",
            "program": "let table x := \\(p_device :Entity(tt:device)) -> @org.thingpedia.builtin.thingengine.builtin.get_commands(device=p_device);"
        },
        {
            "utterance": "commands supported by $p_device",
            "program": "let table x := \\(p_device :Entity(tt:device)) -> @org.thingpedia.builtin.thingengine.builtin.get_commands(device=p_device);"
        },
        {
            "utterance": "what $p_device can do",
            "program": "let table x := \\(p_device :Entity(tt:device)) -> @org.thingpedia.builtin.thingengine.builtin.get_commands(device=p_device);"
        },
        {
            "utterance": "open $p_url",
            "program": "let action x := \\(p_url :Entity(tt:url)) -> @org.thingpedia.builtin.thingengine.builtin.open_url(url=p_url);"
        },
        {
            "utterance": "open the file at $p_url",
            "program": "let action x := \\(p_url :Entity(tt:url)) -> @org.thingpedia.builtin.thingengine.builtin.open_url(url=p_url);"
        },
        {
            "utterance": "open $p_url in the browser",
            "program": "let action x := \\(p_url :Entity(tt:url)) -> @org.thingpedia.builtin.thingengine.builtin.open_url(url=p_url);"
        },
        {
            "utterance": "browse to $p_url",
            "program": "let action x := \\(p_url :Entity(tt:url)) -> @org.thingpedia.builtin.thingengine.builtin.open_url(url=p_url);"
        }
    ]
}